/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projdemo.Pages;

/**
 *
 * @author OMA
 */
import java.awt.HeadlessException;
import java.sql.CallableStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableModel;
import projdemo.reg_User;


public class Register_User extends javax.swing.JFrame {

    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    DefaultTableModel model = new DefaultTableModel(){
        
        @Override
        public boolean isCellEditable(int row, int column){
            return false;
        }
    };
    
    public Register_User() {
        initComponents();
        conn = Register_User.ConnectDB();
        Object col[] = {"UserID", "UserName", "Name", "Password", "Contact_No", "Email", "Reg_Date", "Sec_Q", "Answer"};
        model.setColumnIdentifiers(col);
        Reg_Table.setModel(model);
//        showTable();
        showUser();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

public ArrayList<reg_User> userList() {
        ArrayList<reg_User> userList = new ArrayList<>();
        conn = Register_User.ConnectDB();
        try {
            String q1 = "SELECT * FROM REGISTERED_USER";
            Statement st = conn.createStatement();
            rs = st.executeQuery(q1);
            reg_User user;
            while (rs.next()) {
                user = new reg_User(rs.getInt("UserID"), rs.getString("UserName"), rs.getString("Name"), rs.getString("Password"), rs.getInt("Contact_No"), rs.getString("Email"),
                        rs.getString("Reg_Date"), rs.getString("Sec_Q"), rs.getString("Answer"));
                userList.add(user);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            return null;
        }
        return userList;
    }
    
    
    private void showUser(){
        ArrayList<reg_User> list = userList();
        DefaultTableModel mod = (DefaultTableModel)Reg_Table.getModel();  
        Object[] row = new Object[9];
        for(int i=0; i<list.size(); ++i){
            row[0] = list.get(i).getUserID();
            row[1] = list.get(i).getUsername();
            row[2] = list.get(i).getName();
            row[3] = list.get(i).getPassword();
            row[4] = list.get(i).getContactNo();
            row[5] = list.get(i).getEmail();
            row[6] = list.get(i).getReg_Date();
            row[7] = list.get(i).getSecurity_Question();
            row[8] = list.get(i).getAnswer();
            mod.addRow(row);
        }
    }
    
     public void setDateChoosernull(){
        DateFormat so = new SimpleDateFormat("MM/dd/yy");
        Date dado = new Date();
        so.format(dado);
        dateChooser.setDateFormat(so);
        Calendar la = Calendar.getInstance();
        la.setTime(dado);
        dateChooser.setSelectedDate(la);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * @return
     */
    @SuppressWarnings("unchecked")

    public static Connection ConnectDB() {
        try {
            Class.forName("oracle.jdbc.OracleDriver");
        Connection conn = null;
            conn = DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION =(ENABLE=BROKEN) (ADDRESS=(PROTOCOL=TCP)"
                    + " (HOST=localhost) (PORT=1521)) (CONNECT_DATA=(SERVICE_NAME=orcl)))","C##OMA","WOLF");
        
//        Statement st = conn.createStatement();
//            ResultSet rs = st.executeQuery("SELECT * FROM SESSIONS");
//            while (rs.next()) {
//                System.out.println(rs.getInt(1) + "---" + rs.getInt(2) + "---" + rs.getInt(3) + "---" + rs.getString(4) + "---" + rs.getString(5));
//            }
            return conn;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            return null;
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField3 = new javax.swing.JTextField();
        dateChooserDialog3 = new datechooser.beans.DateChooserDialog();
        dateChooserDialog4 = new datechooser.beans.DateChooserDialog();
        dateChooserDialog5 = new datechooser.beans.DateChooserDialog();
        jLabel1 = new javax.swing.JLabel();
        RegisterButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Reg_Table = new javax.swing.JTable();
        DeleteButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        dateChooser = new datechooser.beans.DateChooserCombo();
        PassField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        NameField = new javax.swing.JTextField();
        UserIDField = new javax.swing.JTextField();
        EmailField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ContactNoField = new javax.swing.JTextField();
        UserNameField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        SecurityQuestionBox = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        AnswerField = new javax.swing.JTextField();

        jTextField3.setText("jTextField3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(1);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projdemo/gzonebig.png"))); // NOI18N

        RegisterButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        RegisterButton.setText("Register");
        RegisterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterButtonActionPerformed(evt);
            }
        });

        Reg_Table.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Reg_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserID", "UserName", "Name", "Password", "Contact_No", "Email", "Registration_Date", "Security_Question", "Answer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Reg_Table.setEditingColumn(0);
        Reg_Table.setEditingRow(0);
        Reg_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Reg_TableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Reg_Table);
        if (Reg_Table.getColumnModel().getColumnCount() > 0) {
            Reg_Table.getColumnModel().getColumn(0).setResizable(false);
            Reg_Table.getColumnModel().getColumn(1).setResizable(false);
            Reg_Table.getColumnModel().getColumn(2).setResizable(false);
            Reg_Table.getColumnModel().getColumn(3).setResizable(false);
            Reg_Table.getColumnModel().getColumn(4).setResizable(false);
            Reg_Table.getColumnModel().getColumn(5).setResizable(false);
            Reg_Table.getColumnModel().getColumn(6).setResizable(false);
            Reg_Table.getColumnModel().getColumn(7).setResizable(false);
            Reg_Table.getColumnModel().getColumn(8).setResizable(false);
        }

        DeleteButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        ExitButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        ClearButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        EditButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 2, true));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("UserID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("UserName:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Contact No:");

        dateChooser.setFieldFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 14));

        PassField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Name:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Registration Date:");

        NameField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        NameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameFieldActionPerformed(evt);
            }
        });

        UserIDField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        EmailField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Email: ");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Security Question:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Password:");

        ContactNoField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ContactNoField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContactNoFieldActionPerformed(evt);
            }
        });

        UserNameField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        UserNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserNameFieldActionPerformed(evt);
            }
        });

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projdemo/icons8-search-18.png"))); // NOI18N
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        SecurityQuestionBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        SecurityQuestionBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "What is your childhood friend's name?", "What is your favourite food?", "What is your school's name?", "What is your first acheivement?", "What do you dream about?", "What do you want to become?" }));
        SecurityQuestionBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SecurityQuestionBoxActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Answer:");

        AnswerField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        AnswerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnswerFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(dateChooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addComponent(EmailField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ContactNoField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NameField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UserNameField)
                    .addComponent(UserIDField)
                    .addComponent(PassField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SecurityQuestionBox, 0, 1, Short.MAX_VALUE)
                    .addComponent(AnswerField, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addContainerGap(58, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(UserIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UserNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ContactNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(SecurityQuestionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(AnswerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(RegisterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110)
                        .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(ClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99)
                        .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(115, 115, 115))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RegisterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))))
        );

        setSize(new java.awt.Dimension(1386, 797));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void UserNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UserNameFieldActionPerformed

    private void ContactNoFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContactNoFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ContactNoFieldActionPerformed

    private void NameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NameFieldActionPerformed

    private JFrame frame;

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        HomeAdmin ob = new HomeAdmin();
        ob.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        // TODO add your handling code here:
        UserIDField.setText(null);
        UserNameField.setText(null);
        NameField.setText(null);
        PassField.setText(null);
        ContactNoField.setText(null);
        EmailField.setText(null);
        setDateChoosernull();
        SecurityQuestionBox.setToolTipText(null);
        AnswerField.setText(null);

    }//GEN-LAST:event_ClearButtonActionPerformed

    private void RegisterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterButtonActionPerformed
        // TODO add your handling code here:
//        String sql = "INSERT INTO REGISTERED_USER(UserID,UserName,Name,Password,Contact_No,Email,Reg_Date,Sec_Q,Answer)VALUES(?,?,?,?,?,?,?,?,?)";
        try {
            conn = Register_User.ConnectDB();
            CallableStatement cs = conn.prepareCall("{call PR_INSERT_USER(?,?,?,?,?,?,?,?,?)}");
//            pst = conn.prepareStatement(sql);
            cs.setString(1, UserIDField.getText());
            cs.setString(2, UserNameField.getText());
            cs.setString(3, NameField.getText());
            cs.setString(4, PassField.getText());
            cs.setString(5, ContactNoField.getText());
            cs.setString(6, EmailField.getText());
            cs.setString(7, getDateChooser());
            cs.setString(8, SecurityQuestionBox.getSelectedItem().toString());
            cs.setString(9, AnswerField.getText());
            cs.execute();
//            pst.execute();
            JOptionPane.showMessageDialog(null, "System Insertion Completed");
            
            rs.close();
            pst.close();
            model.setRowCount(0);
            showUser();
            conn.close();
        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error: Some Fields are Empty");
        }

    }//GEN-LAST:event_RegisterButtonActionPerformed

    private void Reg_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Reg_TableMouseClicked
        // TODO add your handling code here:
        int index = Reg_Table.getSelectedRow();
        TableModel tm = Reg_Table.getModel();
        UserIDField.setText(tm.getValueAt(index, 0).toString());
        UserNameField.setText((String)tm.getValueAt(index,1));
        NameField.setText((String)tm.getValueAt(index,2));
        PassField.setText((String)tm.getValueAt(index,3));
        ContactNoField.setText(tm.getValueAt(index,4).toString());
        EmailField.setText((String) tm.getValueAt(index, 5));
        setDateChooser((String)tm.getValueAt(index, 6));
        for (int i = 0; i < SecurityQuestionBox.getItemCount(); ++i) {
            if (SecurityQuestionBox.getItemAt(i).toString().equals((String)tm.getValueAt(index, 7))) {
                SecurityQuestionBox.setSelectedIndex(i);
            }
        }
        AnswerField.setText((String) tm.getValueAt(index, 8));
    }//GEN-LAST:event_Reg_TableMouseClicked

    private void SecurityQuestionBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SecurityQuestionBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SecurityQuestionBoxActionPerformed

    private void AnswerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnswerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AnswerFieldActionPerformed

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        // TODO add your handling code here:
        conn = Register_User.ConnectDB();
        try {
            int row = Reg_Table.getSelectedRow();
            String str = Reg_Table.getModel().getValueAt(row, 0).toString();
//            String sql = "UPDATE REGISTERED_USER SET UserName=?,Name=?,Password=?,Contact_No=?,Email=?,Reg_Date=?,Sec_Q=?,Answer=? WHERE UserID=" + str;
//            pst = conn.prepareStatement(sql);
            CallableStatement cs = conn.prepareCall("{call PR_UPDATE_USER(?,?,?,?,?,?,?,?,"+str+")}");
            cs.setString(1, UserNameField.getText());
            cs.setString(2, NameField.getText());
            cs.setString(3, PassField.getText());
            cs.setString(4, ContactNoField.getText());
            cs.setString(5, EmailField.getText());
            cs.setString(6, getDateChooser());
            cs.setString(7, SecurityQuestionBox.getSelectedItem().toString());
            cs.setString(8, AnswerField.getText());
            cs.executeUpdate();
//            pst.executeUpdate();

            JOptionPane.showMessageDialog(null, "Update Completed");
            model.setRowCount(0);
            showUser();
        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }//GEN-LAST:event_EditButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        // TODO add your handling code here:
        conn = Register_User.ConnectDB();
        if (Reg_Table.getSelectedRow() != 0) {

            int opt = JOptionPane.showConfirmDialog(null, "Are you sure you want to Delete?", "Delete", JOptionPane.YES_NO_OPTION);
            if (opt == 0) {
                try {
                    int row = Reg_Table.getSelectedRow();
                    String str = Reg_Table.getModel().getValueAt(row, 0).toString();
//                    String sql = "DELETE FROM REGISTERED_USER WHERE UserID=" + str;
                    CallableStatement cs = conn.prepareCall("{call PR_DELETE_USER("+str+")}");
//                    pst = conn.prepareStatement(sql);
//                    pst.executeUpdate();
                    cs.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Row Deleted");
                    model.setRowCount(0);
                    showUser();
                    UserIDField.setText(null);
                    UserNameField.setText(null);
                    NameField.setText(null);
                    PassField.setText(null);
                    ContactNoField.setText(null);
                    EmailField.setText(null);
                    setDateChoosernull();
                    SecurityQuestionBox.setToolTipText(null);
                    AnswerField.setText(null);
                } catch (SQLException | HeadlessException e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select record to delete");
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        // TODO add your handling code here:
        conn = Register_User.ConnectDB();
        if (UserIDField.getText().isEmpty()) {
            frame = new JFrame();
            frame.setAlwaysOnTop(true);
            JOptionPane.showMessageDialog(frame, "Enter UserID");
        } else {
            try {
                String sql = "SELECT * FROM REGISTERED_USER WHERE USERID="+UserIDField.getText();
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                while (rs.next()) {
//                    System.out.println(rs.getString("USERID"));
                    UserIDField.setText(rs.getString("USERID"));
                    UserNameField.setText(rs.getString("USERNAME"));
                    NameField.setText(rs.getString("NAME"));
                    PassField.setText(rs.getString("PASSWORD"));
                    ContactNoField.setText(rs.getString("CONTACT_NO"));
                    EmailField.setText(rs.getString("EMAIL"));
                    setDateChooser(rs.getString("REG_DATE"));
                    AnswerField.setText(rs.getString("ANSWER"));
                    for (int i = 0; i < SecurityQuestionBox.getItemCount(); ++i) {
                        if (SecurityQuestionBox.getItemAt(i).toString().equals(rs.getString("SEC_Q"))) {
                            SecurityQuestionBox.setSelectedIndex(i);
                        }
                    }
                    for (int n = 0; n < Reg_Table.getRowCount(); ++n) {
                        if (model.getValueAt(n, 0).toString().equals(UserIDField.getText())) {
                            Reg_Table.getSelectionModel().setSelectionInterval(n, n);
                        }
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_jLabel10MouseClicked

    
    public String getDateChooser() {
        SimpleDateFormat s = new SimpleDateFormat("MM/dd/yy");
        java.util.Date d = dateChooser.getSelectedDate().getTime();
        String str = s.format(d);
        return str;
    }

    public void setDateChooser(String str) {
        DateFormat df = new SimpleDateFormat("MM/dd/yy");
        Date dobj = new Date();
        try {
            dobj = df.parse(str);
        } catch (ParseException ex) {
            Logger.getLogger(Customer_Page.class.getName()).log(Level.SEVERE, null, ex);
        }
        df.format(dobj);
        Calendar c = Calendar.getInstance();
        dateChooser.setDateFormat(df);
        c.setTime(dobj);
        dateChooser.setSelectedDate(c);
    }
    
    public void showTable() {
        conn = Register_User.ConnectDB();
        if (conn != null) {
            String sql = "SELECT * FROM REGISTERED_USER";
            try {
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                Object[] columnData = new Object[9];
                while (rs.next()) {
                    columnData[0] = rs.getString("UserID");
                    columnData[1] = rs.getString("UserName");
                    columnData[2] = rs.getString("Name");
                    columnData[3] = rs.getString("Password");
                    columnData[4] = rs.getString("Contact_No");
                    columnData[5] = rs.getString("Email");
                    columnData[6] = rs.getString("Reg_Date");
                    columnData[7] = rs.getString("Sec_Q");
                    columnData[8] = rs.getString("Answer");
                    model.addRow(columnData);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    public void updateTable() {
        conn = Register_User.ConnectDB();
        if (conn != null) {
            String sql = "SELECT * FROM REGISTERED_USER ORDER BY ROWID DESC LIMIT 1";

            try {
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                Object[] columnData = new Object[9];
                while (rs.next()) {
                    columnData[0] = rs.getString("UserID");
                    columnData[1] = rs.getString("UserName");
                    columnData[2] = rs.getString("Name");
                    columnData[3] = rs.getString("Password");
                    columnData[4] = rs.getString("Contact_No");
                    columnData[5] = rs.getString("Email");
                    columnData[6] = rs.getString("Reg_Date");
                    columnData[7] = rs.getString("Sec_Q");
                    columnData[8] = rs.getString("Answer");
                    model.addRow(columnData);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
                 UIManager.setLookAndFeel("com.jtattoo.plaf.aluminium.AluminiumLookAndFeel");
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register_User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Register_User().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AnswerField;
    private javax.swing.JButton ClearButton;
    private javax.swing.JTextField ContactNoField;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JTextField EmailField;
    private javax.swing.JButton ExitButton;
    private javax.swing.JTextField NameField;
    private javax.swing.JTextField PassField;
    private javax.swing.JTable Reg_Table;
    private javax.swing.JButton RegisterButton;
    private javax.swing.JComboBox SecurityQuestionBox;
    private javax.swing.JTextField UserIDField;
    private javax.swing.JTextField UserNameField;
    private datechooser.beans.DateChooserCombo dateChooser;
    private datechooser.beans.DateChooserDialog dateChooserDialog3;
    private datechooser.beans.DateChooserDialog dateChooserDialog4;
    private datechooser.beans.DateChooserDialog dateChooserDialog5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
